/*
[컴퓨터 시스템과 하드웨어]

<컴퓨터 시스템>
- 특징
	- 사용자는 응용 프로그램이나 운영체제 패키지에 포함된 GUI와 도구 프로그램(툴, 유틸리티 프로그램)을 통해 컴퓨터를 활용
	- 하드웨어는 모두 운영체제의 배타적이고 독점적인 지배를 받음.
	- 사용자나 응용 프로그램에서 직접 하드웨어 접근 불가능, 반드시 운영체제를 접근해야 함.
- 컴퓨터 시스템을 구성하는 계층
	┌───────────────────────┐
	│				 응용 소프트웨어 층				│   ← Application Software Layer
	└───────────────────────┘
							│
							▼
	┌───────────────────────┐
	│     			   운영체제 층					│   ← Operating System Layer
	└───────────────────────┘
							│
							▼
	┌───────────────────────┐
	│   			컴퓨터 하드웨어 층				│   ← Computer Hardware Layer
	└───────────────────────┘
=> 운영체제는 위로는 응용 프로그램과, 아래로는 하드웨어와의 인터페이스를 제공
   운영체제는 응용 프로그램과 하드웨어 사이의 중계 역할 수행
   (사용자가 하드웨어에 대한 구체적인 내용을 몰라도 컴퓨터를 사용할 수 있도록 하드웨어를 사용자로부터 숨겨줌.)

<컴퓨터 하드웨어>
- CPU
	- 가장 핵심 장치
	- 프로그램 코드(즉, 기계 명령)을 실행하는 중앙처리장치
	- 전원이 공급될 때 작동을 시작하여 메모리에 적재된 프로그램을 실행
- 메모리
	- CPU에 의해 실행되는 프로그램 코드와 데이터가 적재되는 공간
	- 반도체 메모리 RAM이 사용된다.
	- 프로그램은 실행되기 위해 반드시 메모리에 적재되어야 함.

- 캐시 메모리
	- CPU와 메모리 사이에 빠른 캐시 메모리
	- CPU의 프로그램 실행 속도를 높이기 위해 사용하게 되었음.
	  (CPU 기술의 발전이 메모리의 발전 속도보다 빨라 CPU와 메모리 사이의 처리 속도 격차가 벌어짐
		-> 느린 메모리 때문에 CPU가 대기하는 시간을 줄일 필요가 있었음.)
	- 초기: 시스템 버스에 연결되는 방식(옵칩 캐시) -> 그 후: CPU 내부에 두는 방식(온칩 캐시)(CPU의 빠른 실행을 위해)
	- 현대 컴퓨터는 대부분 CPU가 온 칩 캐시 메모리를 내장
	- 가격이 비싸 적은 용량만 사용
	- ex) 캐시 메모리를 가진 컴퓨터
			- 실행될 프로그램 코드나 데이터는 메모리에서 캐시 메모리로 복사(용량이 작아서 현재 실행할 코드와 데이터의 극히 일부분만 저장)
				- CPU는 캐시 메모리로부터만 명령과 데이터를 읽어 실행하기 때문
- 장치들
	- 입출력 장치
		- ex) 키보드, 프린터, 스캐너, 마우스, 디스플레이, 네트워크 장치.. 등
	- 저장 장치
		- ex) 디스크, SSD, USB 메모리
- 버스
	- 컴퓨터 하드웨어들이 서로 데이터를 주고 받기 위해 디지털 신호(0, 1)가 지나가는 여러 가닥의 선을 다발로 묶어 부르는 용어
	- 종류
		- 주소 버스: 주소 신호가 지나다니는 버스
			- 주소 값이 전달되는 여러 선의 다발
		- 데이터 버스: 데이터 신호가 지나다니는 버스
			- 코드나 데이터가 지나다니는 양방향 버스
		- 제어 버스: 제어 신호가 지나다니는 버스
			- 인터럽트 신호, 메모리 읽기/쓰기 신호, 클럭 신호

	+ 주소
		- 레지스터(메모리나 입출력 장치나 저장 장치 내에 있는)들에 대한 번지(0부터 시작)
		- CPU는 (메모리나 입출력 장치에) 값을 쓰거나 읽을 때 반드시 주소를 발생시킴.

	- 종류
		- 시스템 버스
			- 하드웨어(CPU, 캐시 메모리 등)들 사이에 신호를 전송하기 위한 버스
		- 입출력 버스
			- 상대적으로 느린 입출력 장치들로부터 입출력 데이터를 전송하기 위한 버스

- 입출력 제어 장치 및 시스템 제어 회로
	- 입출력 장치에게 명령을 내리고 메모리와 입출력 장치 사이 또는 CPU와 입출력 장치 사이에 데이터가 전달되도록 중계하는 역할
	- ex) DMAC(Direct Memory Access Controller)
		- CPU의 개입 없이 직접 전송하는 장치
		  인터럽트 제어 장치(INTC, Interrupt Controller)
		- 장치들이 입출력을 완료했을 때 발생시키는 인터럽트 신호를 받아 CPU에 전달하는 장치

<CPU와 메모리 관계>
- CPU의 처리능력은 컴퓨터의 처리 능력을 결정
- 32비트 CPU란?
	- 32개의 주소선을 가진 CPU
		- 32개의 주소선은 주소 버스에 연결, CPU는 해당 주소선을 통해 주소를 출력하면 32비트의 주소가 주소 버스를 통해 메모리에 전달
		- 주소선 1가닥에는 하나의 비트가 전달된다.
	- 메모리를 읽는 경우
		- 1. CPU가 주소를 발생시킴.
		- 2. 메모리는 주소 버스를 통해 주소를 전달받는다.
		- 3. 일정 시간 후에 해당 주소의 데이터를 데이터 버스에 내놓는다.
		- 4. CPU는 자신의 데이터 선을 통해 데이터 값을 CPU 내부로 읽어 들인다.
			- (메모리가 느린 경우 CPU는 주소를 발생시키고 오래 기다려야 함을 알 수 있음.)

	- 주소 범위(32개의 주소선을 가진 CPU가 액세스할 수 있는)
		- 2의 32승개의 서로 다른 주소
			- 0 ~ 2의 32승 - 1번지
		- 메모리의 최대 범위
			- 2의 32승 바이트 = 4기가 바이트
				- (한 번지 메모리 크기 = 1바이트)
		=> 32비트 CPU를 가진 컴퓨터에서 사용할 수 있는 메모리(RAM: 반도체 주기억 장치)의 최대 크기 = 4GB
<CPU 기계 명령>
- CPU가 해석하고 실행할 수 있는 기계 명령
- 기계 명령
	- CPU를 설계하는 기업(인텔 등)이 CPU를 설계할 때 결정, CPU에 따라 명령 개수와 형태가 다르다.
- 프로그램을 어떤 CPU를 대상으로 컴파일하였는지에 따라 기계어가 달라짐
	=> 컴파일된 코드는 다른 CPU에서 호환성X

<CPU의 일생>
- CPU는 CPU의 기계 명령들을 전원이 켜지면 작동을 시작해서 꺼질 때까지 계속 실행한다.

+ 프로그램
	- 연속적으로 실행되도록 나열된 일련의 기계 명령들
	- 메모리에 적재된 상태에서만 CPU에 의해 실행 가능

<CPU의 레지스터들>
- CPU는 내부에서 명령을 처리하기 위해 여러 레지스터들을 가지고 있다.
- 종류(CPU마다 이름이 달라 학술적인 이름으로 표기)
	- PC(Program Counter)
		- 다음에 실행할 기계 명령의 메모리 주소를 저장하는 레지스터
		- IP(Instruction Pointer) 레지스터라고도 부른다.
	- IR(Instruction Register)
		- 실행하기 위해 메모리에서 읽어 온 명령이 저장된 레지스터
	- SP(Stack Pointer)
		- 스택 영역의 꼭대기 메모리 주소를 저장하는 레지스터
	- 데이터 레지스터들
		- 연산에 사용될 데이터들을 저장하는 레지스터
	- 상태 레지스터
		- CPU의 상태 정보나 인터럽트 금지 등 제어 정보를 가지는 레지스터
	- 기타 레지스터
		- 페이지 테이블이 저장된 메모리 주소를 가리키는 레지스터 등 운영체제의 실행을 돕는 정보를 가진 레지스터들

<CPU의 명령 사이클>
- CPU가 한 명령을 실행하는 과정
- 과정
	- 명령: mov eax, [300]  ; 메모리 300번지의 데이터를 읽어 eax 레지스터에 저장, 해당 명령이 100번지에 있다고 가정
		- 1. CPU는 PC 레지스터에 저장된 주소 100을 주소 버스에 싣는다.
		- 2. 메모리는 주소 버스로부터 주소 100을 받고, 100번지에 저장된 데이터를 데이터 버스에 싣는다.
			- 100번지에 저장된 데이터 = mov eax, [300] 명령
		- 3. CPU는 데이터 버스에 담긴 바이너리 값들을 IR 레지스터에 저장하고, PC는 다음 명령의 번지로 수정된다.
		- 4. CPU는 연산에 필요한 데이터를 읽기 위해 데이터 주소 300을 주소 버스에 싣는다.
		- 5. 메모리는 300번지에 저장된 값 50을 데이터 버스에 싣는다.
		- 6. CPU는 데이터 버스로부터 50을 CPU 내부의 임시 레지스터에 저장한다.
		- 7. CPU는 명령을 해석하고 실행한다. 명령 실행 결과 50이 eax 레지스터에 저장된다.

<스택은 어디에 있는가?>
- 스택은 프로그램의 지역 변수 등을 저장하도록 할당되는 메모리 영역
- 각 프로그램은 자신만의 스택 공간이 할당
- CPU의 SP(Stack Pointer_ 레지스터는 현재 실행 중인 프로그램의 스택 영역 꼭대기 주소를 가리킴.
- 스택은 호출될 때 해당 내용들이 저장
	- 함수의 지역변수들
	- 매개변수 값들
	- 함수를 마치고 돌아갈 주소
	- 함수 코드가 의도적으로 스택에 저장한 값
- 프로그램 공간 4종류
	- 운영체제는 프로그램을 실행시킬 때 프로그램마다 4개의 공간을 제공한다.
		- 종류
			- 코드 공간
				- 프로그램 코드가 적재되는 메모리 공간
			- 데이터 공간
				- 전역 변수들이 적재되는 공간
			- 힙 공간
				- 프로그램이 실행 중 동적으로 저장할 데이터를 위한 공간
			- 스택 공간
				- 함수가 호출되면서 매개변수나 지역 변수, 함수가 실행을 마치고 돌아갈 주소 등을 저장하기 위한 공간
<컨텍스트>
- 어떤 프로그램이 실행중인 일체의 상황
	- 일체의 상황
		- 메모리와 CPU 레지스터들에게 담겨있다.
			- 메모리
				- 프로그램의 코드, 전역 변수 데이터, 힙(동적 할당 받아 저장한 데이터), 호출된 함수들의 매개변수와 지역변수 등이 저장된 스택
			- CPU 레지스터
				- PC 레지스터
					- 현재 실행 중인 코드의 메모리 주소
				- 데이터 레지스터
					- 이전에 실행된 결과 값이나 현재 실행에 사용될 데이터 값들
				- 상태 레지스터
					- 현재 CPU의 상태 정보
				- SP 레지스터
					- 스택의 톱 주소
- 운영체제가 현재 실행 중인 프로그램을 일시 중단하고 다른 프로그램을 실행시키고자 할 때
	- CPU의 레지스터들만 복사해두면 된다.
	- 메모리는 그대로 있기 때문에 메모리에 있는 내용은 복사할 필요 없다.
=> 현재 실행중인 프로그램의 컨텍스트 = 현재 CPU에 들어 있는 레지스터들의 값

- 컨텍스트 스위칭
	- 운영체제가 현재 실행 중인 프로그램 A의 컨텍스트를 저장해두고, 다른 프로그램 B를 실행시키기 위해 프로그램 B에 저장된 컨텍스트를 CPU로 옮기는 것
	- 과정(ex) 프로그램 A 실행 중단 -> 프로그램 B 실행)
		- 1. 운영체제는 현재 CPU 레지스터들의 값(프로그램 A의 컨텍스트를 구성하는)을 메모리의 특정 영역에 저장
			- 컨텍스트 정보들은 운영체제만 접근할 수 있는 메모리 영역에 저장된다.
		- 2. 프로그램 B의 저장된 컨텍스트 정보를 CPU 레지스터에 적재
		- 3. CPU의 PC 레지스터는 프로그램 B가 실행을 재개할 코드의 주소를, SP 레지스터는 프로그램 B의 스택 영역을 라지킨다.
			- 스택에는 프로그램 B가 중단될때 실행하던 함수의 매개 변수나 지역 변수 등이 들어있다.
			- CPU마다 레지스터의 개수와 크기가 다르므로 저장되는 컨텍스트의 크기도 CPU와 운영체제에 따라 다르다.

- 멀티 코어 CPU
	- 전통적인 의미의 CPU
		- 1개의 제어장치와 1개의 산술논리연산장치와 여러 개의 레지스터들을 갖추고 프로그램을 실행하는 프로세서
	- 멀티 코어 cpu
		- 하나의 CPU로 2개의 프로그램을 동시에 실행할 수 있는 멀티 코어 CPU
		- 여러 개의 코어를 가지고 동시에 여러 개의 프로그램을 실행할 수 있는 CPU
			- (여러 개의 CPU를 갖추고 동시에 여러 개의 프로그램을 실행하는 병렬 처리 컴퓨터들과는 다른)
		- 오늘날 많은 CPU들의 형태
		+ 코어
			- 레지스터들과 제어장치, 산술논리연산장치, 외부 버스와 연결되는 인터페이스 장치를 독립적으로 갖춘
			- 하나의 프로그램을 실행할 수 있는 완벽한 프로세서



*/