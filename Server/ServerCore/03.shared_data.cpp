//============2025-07-01==========
#include <iostream>
#include <thread>
#include <chrono>



//========================  [ 스레드 정의 ] ======================================//
																																																																										/*
		[==================[강의 내용]=====================]
																																																																											*/
int counter = 0;

void increment() {
	for (int i = 0; i < 10000; ++i) {
		++counter; // 공유 데이터에 접근
	}
}
																																																																											/*
	[공유 데이터 문제]

 - 멀티스레딩 환경에서는 동시에 읽고 쓰는 작업(read/write) 이 충돌(Race Condition) 을 일으킬 수 있습니다.

 - 두 스레드가 동시에 ++counter를 호출하면, 내부적으로는 다음과 같이 동작합니다
	
	1. 레지스터에 counter 값 로드
	2. +1 수행
	3. 결과를 메모리에 저장
 
 -	이 사이에 다른 스레드가 counter 값을 변경하면, 값이 덮어쓰기 되어 의도한 결과보다 적게 증가할 수 있습니다. 이게 데이터 경쟁(Race Condition) 입니다.

 [ 동기화(Synchronization)란? ]
 - 스레드 동기화는 여러 스레드가 동시에 접근하는 자원(공유 데이터, 장치 등) 에 대해 정해진 순서나 일관된 결과를 보장하도록 접근을 조정하는 것.
 1. mutex (뮤텍스)
 2. lock_guard
 3. atomic
 4. condition_variable


*/

