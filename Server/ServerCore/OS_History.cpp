/*
[운영체제의 역사]
운영체제는 컴퓨터가 처음 생길 때부터 있지 않았다.

<<전자식 디지털 컴퓨터 시대>>
<고정 프로그램 컴퓨터(1940년대)> ex) ENIAC

컴퓨터의 모든 기능을 하드웨어로 만드는 시절, 소프트웨어 개념X, 운영체제 개념X
하나의 프로그램을 컴퓨터 기계에 굳히는 방식
- 실행하고자 하는 작업(Job, 오늘날의 프로그램)을 종이에 스케치 후, 하드웨어 스위치를 위아래로 세팅하거나 전선에 직접 연결하는 방법
=> 컴퓨터 자체가 하나의 프로그램(한 개의 프로그램을 하드웨어로 고착화시키는 프로그래밍 방식)
	- 해당 컴퓨터는 오직 해당 프로그램만 실행 가능, 다른 프로그램을 실행하려면 전선을 해체하고 다시 스위치를 조작하고 전선을 연결해야만 한다.
	- 여기서 프로그램 디버깅은 컴퓨터 하드웨어에서 잘못 연결된 전선을 찾는 것을 의미
=> CPU와 메모리의 개념이 분리X, 프로그램을 저장 장치에서 메모리에 적재하여 실행시키는 개념X
   (오직 배선판에 전선을 연결하여 프로그램을 기계에 고착시키는 고정 프로그램 방식의 컴퓨터)

<내장 프로그램 컴퓨터(1945년)
컴퓨터를 하드웨어와 소프트웨어로 분리
컴퓨터 하드웨어는 그대로 두고 실행을 원하는 프로그램을 메모리에 적재한 후 CPU가 실행하는 방식
이 후 모든 컴퓨터는 내장 프로그램 방식으로 만들어지게 되어 오늘날까지 사용되고 있음.



+ 내장 프로그램
컴퓨터의 구조를 CPU와 전자식 메모리로 분리,
프로그램의 명령(코드)들을 전자식 메모리에 적재하고 , CPU가 메모리에서 명령들을 하나씩 CPU 내부로 가지고 와서 처리하는 새로운 방식의 컴퓨터 개념
내장 프로그램 컴퓨터를 사용하면, 실행시키고자 하는 여러 개의 프로그램이 있을 때, 전자식 메모리에 한 번에 하나씩 프로그램을 적재하고 CPU에게 프로그램을 실행하도록 지시하기만 하면 된다.

내장 프로그램 컴퓨터의 구조
- CPU(제어 장치, 연산 장치, 레지스터들로 구성)
	- 제어장치: 메모리에서 명령을 읽어오고, 해석하고, 연산장치에서 명령에 지시된 연산을 수행하도록 제어
	- 연산장치: 덧셈, 뺄셈, 곱셈, 나눗셈의 산술 연산과 논리곱(and), 논리합(or), 논리부정(not)의 논리 연산을 처리하는 하드웨어
	- 레지스터: 연산을 실행하는 동안 명령과 데이터를 일시 저장하는 저장소

- 메모리 내의 명령이나 데이터는 주소로 엑세스
- CPU 레지스터
	- PC (Program Counter)
		- 다음에 실행할 명령어의 메모리 주소 저장
		- 명령어를 순차적으로 실행하기 위해 주소 기억
	- MAR(Memory Address Register)
		- PC에 저장된 주소를 메모리로 전달하는 역할
		- 메모리에서 데이터를 가져오기 위한 주소 출력용 레지스터
	- MDR(Memory Data Register)
		- 메모리로부터 읽어온 명령어 또는 데이터를 임시로 저장
		- 제어장치가 메모리에서 읽은 값은 먼저 이곳에 저장된다.
	- IR(Instruction Register)
		- MDR에 저장된 명령어가 이동하여 저장되는 레지스터
		- 즉, 현재 실행할 명령어를 저장하고 해석
	- AC(Accumulator Register)
		- 계산에 사용될 데이터 또는 연산 결과를 저장
		- 주로 연산 장치(ALU)와 연계되어 동작

	- 흐름도
		1. PC → 다음 명령어 주소 보관
		2. 주소 → MAR → 메모리 접근
		3. 메모리 내용 → MDR (임시 저장)
		4. 명령어 → IR (실행 준비)
		5. 계산 결과 ↔ AC

		┌────────────┐
		│   PC					  │   ← 다음 명령어 주소 저장
		└────┬───────┘
			 │
			 ▼
		┌────────────┐
		│   MAR				  │   ← 주소를 메모리에 전달
		└────┬───────┘
			 │
			 ▼
		┌────────────┐
		│  Memory				  │   ← 명령어 또는 데이터 읽기
		└────┬───────┘
			 │
			 ▼
		┌────────────┐
		│   MDR				  │   ← 메모리에서 읽어온 값 임시 저장
		└────┬───────┘
			 │
			 ├─────────────┐
			 │                          ▼
			 │				 ┌────────────┐
			 │				 │    IR				   │   ← 읽어온 값이 명령어인 경우, 제어장치가 해석
			 │				 └────────────┘
			 │
			 ▼
		┌────────────┐
		│    AC				  │   ← 계산에 필요한 값 or 계산 결과 저장
		└────────────┘

*/